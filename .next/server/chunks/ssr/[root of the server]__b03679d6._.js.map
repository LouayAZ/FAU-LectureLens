{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/ai-instance.ts"],"sourcesContent":["// src/ai/ai-instance.ts\nimport {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\nimport nextPlugin from '@genkit-ai/next'; // Correct import using default export\nimport { logger } from 'genkit/logging';\n\nlogger.setLogLevel('debug');\n\nexport const ai = genkit({\n  plugins: [\n    googleAI(), // Keep googleAI as a function call if it requires configuration\n  ],\n  // enableTracingAndMetrics: true,\n});\n"],"names":[],"mappings":"AAAA,wBAAwB;;;;AACxB;AAAA;AACA;AAAA;AAEA;AAAA;;;;AAEA,yJAAA,CAAA,SAAM,CAAC,WAAW,CAAC;AAEZ,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QACP,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KACR;AAEH","debugId":null}},
    {"offset": {"line": 240, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/summarize-lecture.ts"],"sourcesContent":["// This is an autogenerated file from Firebase Studio.\n'use server';\n\n/**\n * @fileOverview Summarizes a lecture transcript using Genkit and LLMs.\n *\n * - summarizeLectureTranscript - A function that summarizes a lecture transcript.\n * - SummarizeLectureTranscriptInput - The input type for the summarizeLectureTranscript function.\n * - SummarizeLectureTranscriptOutput - The return type for the summarizeLectureTranscript function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst SummarizeLectureTranscriptInputSchema = z.object({\n  transcript: z\n    .string()\n    .describe('The lecture transcript to summarize.  Must be text.'),\n});\nexport type SummarizeLectureTranscriptInput = z.infer<\n  typeof SummarizeLectureTranscriptInputSchema\n>;\n\nconst SummarizeLectureTranscriptOutputSchema = z.object({\n  summary: z.string().describe('A concise summary of the lecture transcript.'),\n});\nexport type SummarizeLectureTranscriptOutput = z.infer<\n  typeof SummarizeLectureTranscriptOutputSchema\n>;\n\nexport async function summarizeLectureTranscript(\n  input: SummarizeLectureTranscriptInput\n): Promise<SummarizeLectureTranscriptOutput> {\n  return summarizeLectureTranscriptFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'summarizeLectureTranscriptPrompt',\n  model: 'googleai/gemini-1.5-flash', // Specify the model by string identifier\n  input: {\n    schema: z.object({\n      transcript: z\n        .string()\n        .describe('The lecture transcript to summarize.  Must be text.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      summary: z.string().describe('A concise summary of the lecture transcript.'),\n    }),\n  },\n  prompt: `You are an expert academic assistant tasked with summarizing lecture transcripts.\n\n  Please provide a concise and informative summary of the following lecture transcript.\n  The summary should focus on the key concepts, main ideas, and important details discussed in the lecture.\n  Aim for a summary that is about 20% to 30% the length of the original transcript.  The user is a student and needs to use this summary to study for an exam.\n\n  Transcript: {{{transcript}}}\n  `,\n});\n\nconst summarizeLectureTranscriptFlow = ai.defineFlow<\n  typeof SummarizeLectureTranscriptInputSchema,\n  typeof SummarizeLectureTranscriptOutputSchema\n>({\n  name: 'summarizeLectureTranscriptFlow',\n  inputSchema: SummarizeLectureTranscriptInputSchema,\n  outputSchema: SummarizeLectureTranscriptOutputSchema,\n},\nasync input => {\n  const {output} = await prompt(input);\n  return output!;\n});\n\n"],"names":[],"mappings":"AAAA,sDAAsD;;;;;;AAGtD;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,YAAY,uIAAA,CAAA,IAAC,CACV,MAAM,GACN,QAAQ,CAAC;AACd;AAKA,MAAM,yCAAyC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAKO,eAAe,uCAAwB,GAAxB,2BACpB,KAAsC;IAEtC,OAAO,+BAA+B;AACxC;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;IACP,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,YAAY,uIAAA,CAAA,IAAC,CACV,MAAM,GACN,QAAQ,CAAC;QACd;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC/B;IACF;IACA,QAAQ,CAAC;;;;;;;EAOT,CAAC;AACH;AAEA,MAAM,iCAAiC,2HAAA,CAAA,KAAE,CAAC,UAAU,CAGlD;IACA,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA1CsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 310, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/extract-key-takeaways.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Extracts key takeaways from a lecture transcript.\n *\n * - extractKeyTakeaways - A function that extracts key takeaways from a lecture transcript.\n * - ExtractKeyTakeawaysInput - The input type for the extractKeyTakeaways function.\n * - ExtractKeyTakeawaysOutput - The return type for the extractKeyTakeaways function.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst ExtractKeyTakeawaysInputSchema = z.object({\n  transcript: z.string().describe('The lecture transcript.'),\n});\nexport type ExtractKeyTakeawaysInput = z.infer<typeof ExtractKeyTakeawaysInputSchema>;\n\nconst ExtractKeyTakeawaysOutputSchema = z.object({\n  keyTakeaways: z.array(z.string()).describe('The key takeaways from the lecture.'),\n});\nexport type ExtractKeyTakeawaysOutput = z.infer<typeof ExtractKeyTakeawaysOutputSchema>;\n\nexport async function extractKeyTakeaways(input: ExtractKeyTakeawaysInput): Promise<ExtractKeyTakeawaysOutput> {\n  return extractKeyTakeawaysFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'extractKeyTakeawaysPrompt',\n  model: 'googleai/gemini-1.5-flash', // Specify the model by string identifier\n  input: {\n    schema: z.object({\n      transcript: z.string().describe('The lecture transcript.'),\n    }),\n  },\n  output: {\n    schema: z.object({\n      keyTakeaways: z.array(z.string()).describe('The key takeaways from the lecture.'),\n    }),\n  },\n  prompt: `You are an AI assistant designed to extract key takeaways from lecture transcripts.\n\n  Please provide a list of the most important points from the following transcript:\n  {{transcript}}\n\n  Format your response as a list of key takeaways.\n  `,\n});\n\nconst extractKeyTakeawaysFlow = ai.defineFlow<\n  typeof ExtractKeyTakeawaysInputSchema,\n  typeof ExtractKeyTakeawaysOutputSchema\n>(\n  {\n    name: 'extractKeyTakeawaysFlow',\n    inputSchema: ExtractKeyTakeawaysInputSchema,\n    outputSchema: ExtractKeyTakeawaysOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAClC;AAGA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,cAAc,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;AAC7C;AAGO,eAAe,uCAAiB,GAAjB,oBAAoB,KAA+B;IACvE,OAAO,wBAAwB;AACjC;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;IACP,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAClC;IACF;IACA,QAAQ;QACN,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,cAAc,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;QAC7C;IACF;IACA,QAAQ,CAAC;;;;;;EAMT,CAAC;AACH;AAEA,MAAM,0BAA0B,2HAAA,CAAA,KAAE,CAAC,UAAU,CAI3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAtCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 378, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-quiz.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview Generates multiple-choice quiz questions from a lecture transcript.\n *\n * - generateQuiz - A function that generates quiz questions from a transcript.\n * - GenerateQuizInput - The input type for the generateQuiz function.\n * - GenerateQuizOutput - The return type for the generateQuiz function.\n * - QuizQuestionOutput - The type for a single generated quiz question.\n */\n\nimport {ai} from '@/ai/ai-instance';\nimport {z} from 'genkit';\n\nconst GenerateQuizInputSchema = z.object({\n  transcript: z\n    .string()\n    .describe('The lecture transcript to generate quiz questions from.'),\n  numQuestions: z\n    .number()\n    .default(5)\n    .describe('The number of quiz questions to generate.'),\n});\nexport type GenerateQuizInput = z.infer<typeof GenerateQuizInputSchema>;\n\n// Define schema for a single question\nconst QuizQuestionSchema = z.object({\n  question: z.string().describe('The quiz question.'),\n  options: z.array(z.string()).describe('The multiple-choice options.'),\n  correctAnswer: z.string().describe('The correct answer.'),\n});\n// Export the type for a single question\nexport type QuizQuestionOutput = z.infer<typeof QuizQuestionSchema>;\n\n\nconst GenerateQuizOutputSchema = z.object({\n  questions: z.array(QuizQuestionSchema).describe('The generated quiz questions.')\n});\nexport type GenerateQuizOutput = z.infer<typeof GenerateQuizOutputSchema>;\n\nexport async function generateQuiz(input: GenerateQuizInput): Promise<GenerateQuizOutput> {\n  return generateQuizFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateQuizPrompt',\n  model: 'googleai/gemini-1.5-flash', // Specify the model by string identifier\n  input: {\n    schema: z.object({\n      transcript: z\n        .string()\n        .describe('The lecture transcript to generate quiz questions from.'),\n      numQuestions: z\n        .number()\n        .default(5)\n        .describe('The number of quiz questions to generate.'),\n    }),\n  },\n  output: {\n    // Use the existing GenerateQuizOutputSchema which now internally uses QuizQuestionSchema\n    schema: GenerateQuizOutputSchema,\n  },\n  prompt: `You are an expert educator creating a multiple choice quiz based on the following lecture transcript.  Create {{{numQuestions}}} multiple choice questions.\n\nTranscript: {{{transcript}}}\n\nEach question should have 4 possible answers, with one being the correct answer.\n\nOutput a JSON object matching the output schema.\n`,\n});\n\nconst generateQuizFlow = ai.defineFlow<\n  typeof GenerateQuizInputSchema,\n  typeof GenerateQuizOutputSchema\n>(\n  {\n    name: 'generateQuizFlow',\n    inputSchema: GenerateQuizInputSchema,\n    outputSchema: GenerateQuizOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    // Ensure output matches the schema, especially the array structure\n    if (!output || !Array.isArray(output.questions)) {\n        throw new Error(\"Invalid output format received from AI model.\");\n    }\n    return output;\n  }\n);\n\n"],"names":[],"mappings":";;;;;AAEA;;;;;;;CAOC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,YAAY,uIAAA,CAAA,IAAC,CACV,MAAM,GACN,QAAQ,CAAC;IACZ,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,OAAO,CAAC,GACR,QAAQ,CAAC;AACd;AAGA,sCAAsC;AACtC,MAAM,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,SAAS,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;IACtC,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACrC;AAKA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,WAAW,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,oBAAoB,QAAQ,CAAC;AAClD;AAGO,eAAe,uCAAU,GAAV,aAAa,KAAwB;IACzD,OAAO,iBAAiB;AAC1B;AAEA,MAAM,SAAS,2HAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;IACP,OAAO;QACL,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;YACf,YAAY,uIAAA,CAAA,IAAC,CACV,MAAM,GACN,QAAQ,CAAC;YACZ,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,OAAO,CAAC,GACR,QAAQ,CAAC;QACd;IACF;IACA,QAAQ;QACN,yFAAyF;QACzF,QAAQ;IACV;IACA,QAAQ,CAAC;;;;;;;AAOX,CAAC;AACD;AAEA,MAAM,mBAAmB,2HAAA,CAAA,KAAE,CAAC,UAAU,CAIpC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,mEAAmE;IACnE,IAAI,CAAC,UAAU,CAAC,MAAM,OAAO,CAAC,OAAO,SAAS,GAAG;QAC7C,MAAM,IAAI,MAAM;IACpB;IACA,OAAO;AACT;;;IAhDoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 459, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 520, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 534, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgQ,GAC7R,8BACA","debugId":null}},
    {"offset": {"line": 548, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}